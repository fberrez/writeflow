# WriteFlow - Context Documentation

## Project Overview

WriteFlow is an addictive writing application built with React and TypeScript that gamifies the writing experience through immediate feedback, visual effects, and gentle constraints that encourage flow state. The app focuses on creating an immersive, distraction-free writing environment with smart session management.

## Tech Stack

- **Frontend**: React 18 + TypeScript
- **Build Tool**: Vite
- **Styling**: Tailwind CSS with custom stone theme
- **Icons**: Lucide React
- **Persistence**: LocalStorage API
- **Deployment**: Docker + Railway

## Architecture

### Core Components

#### App.tsx
- Main application orchestrator
- Manages global state (text, settings, session data)
- Handles persistence with localStorage
- Manages session lifecycle and goal completion
- Integrates all hooks and components

#### WritingArea.tsx
- Main textarea component with particle effects
- Enforces writing modes (redact, no-delete, no-copy-paste)
- Handles cursor tracking for particle effects
- Responsive design with mobile warnings

#### SettingsPanel.tsx
- Sliding panel from right side
- Dual goal system: word count vs timer goals
- Smart lock/unlock behavior during sessions
- Bypass prevention during initial setup
- Session start button with state-aware text

#### StatsDisplay.tsx
- Real-time statistics sidebar
- Dynamic display based on goal type
- Progress bars with different colors for word/timer goals
- Session duration and goal progress tracking

### Custom Hooks

#### useWritingStats
- Tracks word count, character count, session duration
- Dual goal system support (words vs timer)
- Dynamic progress calculation based on goal type
- Session start time management with proper timer reset
- Persistence integration with session data

#### useParticles
- Creates particle effects on keystrokes
- Cursor position tracking with text wrapping support
- Confetti celebrations for goal completion
- Performance optimized particle lifecycle

#### useWritingModes
- Implements focus modes (redact, no-delete, no-paste)
- Keyboard event interception and prevention
- Selective clipboard operation blocking (allows copy and select-all for export)

#### useGoalCelebration
- Manages confetti celebrations when goals are reached
- Cursor-based celebration positioning
- Integration with goal completion logic

### Utility Systems

#### Storage (utils/storage.ts)
- Type-safe localStorage wrapper
- Handles text, settings, and session persistence
- Error handling for storage unavailability
- Automatic serialization/deserialization

#### Types (types/index.ts)
- WritingSettings: All app configuration including dual goals
- WritingStats: Real-time statistics with goal type awareness
- SessionData: Persistence data structure
- Comprehensive TypeScript coverage

## Key Features

### Smart Session Management
- **Initial Setup**: Settings panel opens automatically for new users
- **Session Start**: Explicit "Start Writing Session" button
- **Settings Lock**: All settings disabled during active sessions
- **Goal Unlock**: Settings unlock when goal is reached
- **Bypass Prevention**: Cannot close settings during initial setup

### Dual Goal System
- **Word Count Goals**: Traditional word-based targets
- **Timer Goals**: Session duration-based targets (minutes)
- **Dynamic Progress**: Real-time calculation based on selected goal type
- **Goal Continuation**: Timer continues running after goal completion
- **Flexible Targets**: User-configurable goals for both types

### Focus Modes
- **Redact Mode**: Blurs text while maintaining layout
- **No-Delete Mode**: Disables backspace/delete keys
- **No Paste Mode**: Blocks paste/cut operations while allowing copy and select-all for text export
- **Mode Enforcement**: Active during sessions, configurable when unlocked

### Persistence & Data Management
- **Text Persistence**: Automatic saving with debouncing
- **Settings Persistence**: Immediate saving on changes
- **Session Persistence**: Periodic saves and beforeunload handling
- **Cross-Session Continuity**: Restore state on app reload
- **Storage Safety**: Graceful handling of storage unavailability

### Visual Design
- **Stone Theme**: Warm, gentle colors (#fef7ed, #f5f5f4, rgba tones)
- **Glassmorphism**: Backdrop blur effects with warm overlays
- **Responsive**: Desktop-optimized with mobile warnings
- **Accessibility**: Proper contrast and keyboard navigation
- **Animation**: Smooth transitions and micro-interactions

## User Experience Flow

### First Visit
1. Settings panel opens automatically
2. User cannot close panel (X button hidden, shortcuts disabled)
3. User configures goal type and target
4. User clicks "ðŸš€ Start Writing Session"
5. Settings lock, timer starts from 0, panel closes

### Active Session
1. Timer counts up from 00:00
2. All settings are locked and grayed out
3. Particles appear on keystrokes
4. Real-time progress tracking
5. Focus modes are enforced

### Goal Completion
1. Confetti celebration at cursor position
2. Settings automatically unlock
3. Timer continues running (doesn't reset)
4. Button changes to "ðŸŽ‰ Start New Session"
5. User can modify settings or continue writing

### Reset Flow
1. User clicks reset button (confirmation if text exists)
2. Text cleared, timer reset to 00:00
3. Session state reset (sessionStarted: false)
4. Settings unlocked
5. Settings panel opens automatically
6. Ready for new session configuration

## Development Guidelines

### State Management
- Use React hooks for local state
- Minimize prop drilling with strategic state placement
- Leverage useCallback for performance optimization
- Implement proper dependency arrays for useEffect

### Performance Considerations
- Debounce text saving (1 second delay)
- Optimize particle rendering with cleanup
- Use React.memo for expensive components
- Minimize re-renders with proper state structure

### Error Handling
- Graceful localStorage failure handling
- Type safety with TypeScript throughout
- Input validation for user settings
- Fallback values for missing data

### Testing Approach
- Focus on user flows rather than implementation details
- Test session state transitions
- Verify persistence across page reloads
- Ensure keyboard shortcuts work correctly

## Recent Major Changes

### Sound System Removal
- Completely removed Web Audio API integration
- Removed useAudio hook and all sound-related UI
- Simplified user experience without audio distractions

### Timer System Overhaul
- Fixed timer to start from 0 when session begins
- Timer continues running after goal completion
- Proper session state management with sessionStarted flag
- Reset functionality properly stops and resets timer

### Settings Lock Enhancement
- Settings lock when session starts (not on setting change)
- Explicit "Start Writing Session" button required
- Settings unlock only when goal is reached
- Bypass prevention during initial setup

### UI/UX Improvements
- Stone theme with warm, gentle colors
- Improved number input handling (disabled scroll)
- Better border styling for form fields
- Enhanced button states and feedback

## File Structure

```
apps/frontend/src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ GoalCelebration.tsx    # Confetti celebration component
â”‚   â”œâ”€â”€ SettingsPanel.tsx      # Main settings interface
â”‚   â”œâ”€â”€ StatsDisplay.tsx       # Real-time statistics
â”‚   â”œâ”€â”€ WritingArea.tsx        # Main textarea with effects
â”‚   â””â”€â”€ index.ts               # Component exports
â”œâ”€â”€ hooks/
â”‚   â”œâ”€â”€ useGoalCelebration.ts  # Goal completion celebrations
â”‚   â”œâ”€â”€ useParticles.ts        # Particle effect system
â”‚   â”œâ”€â”€ useWritingModes.ts     # Focus mode enforcement
â”‚   â”œâ”€â”€ useWritingStats.ts     # Statistics and progress tracking
â”‚   â””â”€â”€ index.ts               # Hook exports
â”œâ”€â”€ types/
â”‚   â””â”€â”€ index.ts               # TypeScript definitions
â”œâ”€â”€ utils/
â”‚   â”œâ”€â”€ storage.ts             # localStorage utilities
â”‚   â””â”€â”€ index.ts               # Utility exports
â”œâ”€â”€ App.tsx                    # Main application component
â”œâ”€â”€ main.tsx                   # Application entry point
â””â”€â”€ index.css                  # Global styles and theme
```

## Configuration Files

- **tailwind.config.js**: Custom stone theme colors and utilities
- **vite.config.ts**: Build configuration with path aliases
- **tsconfig.json**: TypeScript configuration with strict mode
- **Dockerfile**: Multi-stage production build
- **docker-compose.yml**: Development and production environments

## Deployment

### Local Development
```bash
pnpm install
pnpm dev
```

### Docker Production
```bash
docker-compose up -d
```

### Railway Deployment
- Automatic detection of Dockerfile
- Multi-stage build for optimized images
- Nginx serving for production performance
- Health checks and security headers included

## Future Considerations

### Potential Enhancements
- Cloud synchronization for cross-device persistence
- Writing analytics and insights
- Custom themes and personalization
- Export functionality for completed sessions
- Social features and writing challenges

### Technical Debt
- Consider moving to a more robust state management solution for complex features
- Implement proper error boundaries for better error handling
- Add comprehensive test coverage
- Consider PWA features for offline functionality

This documentation should be updated as the application evolves and new features are added.